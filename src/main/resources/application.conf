akka {
   loggers = ["akka.event.slf4j.Slf4jLogger"]
   loglevel = "DEBUG"
   stdout-loglevel = "DEBUG"
   logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

   log-dead-letters = 40

   actor {
      provider = local

      default-dispatcher {
         # Throughput for default Dispatcher,
         # set to 1 for as fair as possible
         throughput = 10
      }
   }
}

custom-dispatcher-akka {
   my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
         fixed-pool-size = 16
      }
      throughput = 1
   }
}

custom-mailbox-akka {
   non-blocking-bounded {
      mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
      mailbox-capacity = 10
   }

   akka.actor.deployment {
      /mailboxActor {
         mailbox = non-blocking-bounded
      }
   }
}

custom-mailbox-requirements-akka {
   non-blocking-bounded {
      mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
      mailbox-capacity = 10
   }

   akka.actor.mailbox.requirements {
      "akka.dispatch.BoundedMessageQueueSemantics" = non-blocking-bounded
   }
}

custom-priority-mailbox-akka {
   custom-priority-mailbox {
      mailbox-type = "com.akkatraining.scala.mailboxes.MyPriorityMailbox"
   }
}


remote-akka {
   akka {
      actor {
         provider = remote
      }

      remote {
         log-sent-messages = on

         # If this is "on", Akka will log all inbound messages at DEBUG level,
         # if off then they are not logged
         log-received-messages = on

         enabled-transports = ["akka.remote.netty.tcp"]
         netty.tcp {
            hostname = "127.0.0.1"
            port = 2552
         }
      }
   }
}

local-router-akka {
   akka {
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      loglevel = "DEBUG"
      stdout-loglevel = "DEBUG"
      logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

      actor {
         provider = local

         default-dispatcher {
            # Throughput for default Dispatcher,
            # set to 1 for as fair as possible
            throughput = 10
         }

         deployment {
            /workerActor {
               router = round-robin-pool
               nr-of-instances = 10
               resizer {
                  lower-bounds = 4
                  upper-bounds = 20
                  messages-per-resize = 3
               }
            }
         }
      }
   }
}

clustering-akka {
   akka {
      actor {
         provider = "cluster"

         deployment {
            /simpleRouter {
               router = round-robin-pool
               nr-of-instances = 16
               routees.paths = ["/user/simpleActor"]
               cluster {
                  enabled = on
                  //allow-local-routees = on
               }
            }
         }
      }

      remote {
         transport-failure-detector {
            heartbeat-interval = 30 s   # default 4s
            acceptable-heartbeat-pause = 10 s  # default 10s
         }
         log-remote-lifecycle-events = off
         netty.tcp {
            hostname = "127.0.0.1"
            port = 0
         }
      }

      cluster {
         seed-nodes = [
            "akka.tcp://My-Cluster@127.0.0.1:2551",
            "akka.tcp://My-Cluster@127.0.0.1:2552"]

         # auto downing is NOT safe for production deployments.
         # you may want to use it during development, read more about it in the docs.
         #
         # auto-down-unreachable-after = 10s
      }
   }

   # Enable metrics extension in akka-cluster-metrics.
   akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension",
      "akka.cluster.client.ClusterClientReceptionist"]

   # Sigar native library extract location during tests.
   # Note: use per-jvm-instance folder when running multiple jvm on one host.
   akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native
}


client {
   akka {
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      loglevel = "DEBUG"
      stdout-loglevel = "DEBUG"
      logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

      actor {
         provider = "akka.remote.RemoteActorRefProvider"

         default-dispatcher {
            # Throughput for default Dispatcher,
            # set to 1 for as fair as possible
            throughput = 10
         }
      }

      remote {
         log-sent-messages = on

         # If this is "on", Akka will log all inbound messages at DEBUG level,
         # if off then they are not logged
         log-received-messages = on

         enabled-transports = ["akka.remote.netty.tcp"]
         netty.tcp {
            hostname = "127.0.0.1"
            port = 2553
         }
      }
   }
}
